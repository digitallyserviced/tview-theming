package theme

import (
	// "fmt"

	// "fmt"
	"fmt"
	"reflect"
	"regexp"
	"strings"
	"text/template"

	"github.com/digitallyserviced/tview"
	"github.com/gdamore/tcell/v2"
	"github.com/gookit/color"
	"github.com/gookit/goutil/strutil"
	// "github.com/digitallyserviced/coolors/coolor"
)

type Theme struct {
	HeaderBackground  tcell.Color
	GrayerBackground  tcell.Color
	SidebarBackground tcell.Color
	SidebarLines      tcell.Color
	ContentBackground tcell.Color
	Border            tcell.Color
	Primary           tcell.Color
	Secondary         tcell.Color
	TopbarBorder      tcell.Color
	InfoLabel         tcell.Color
	Styles            map[string]tcell.Style
	TagStyles         map[string]TagStyle
	Formats           map[string]ThemeFormatter
	Ansi              map[string]TagStyle
	AnsiOverride      map[string]TagStyle
}

var FormatFuncs = template.FuncMap{
	// "contrast": ,
}

type ThemeFormatter interface {
	Formatt() string
}

type FormatFn func(tf *ThemeFormatt, i ...interface{}) string
type FormatParseFn func(tf *ThemeFormat, i ...interface{})

type ThemeFormatt struct {
	formatStr string
	PreFn     FormatParseFn
	formatFn  FormatFn
	Required  []reflect.Kind
	Keys      []string
}

type ThemeFormat struct {
	*ThemeFormatt
	BaseValues []reflect.Value
	Values     []reflect.Value
}

// Formatt implements ThemeFormatter
func (tf *ThemeFormat) formatFn() (s string) {
	// rv := append([]reflect.Value{reflect.ValueOf(tf.formatStr)}, tf.Values...)
	// str := reflect.ValueOf(fmt.Sprintf).Call(rv)
	vvals := append(tf.BaseValues, tf.Values...)
	vals := make(map[string]string)
	for i, v := range tf.Keys {
		str, _ := strutil.AnyToString(vvals[i].Interface(), false)
		vals[v] = str
	}
	str := strutil.RenderText(tf.formatStr, vals, FormatFuncs)
	fmt.Println("HOTSHIT", str)
	s = str
	return
}
func (tf *ThemeFormat) parseFn(i ...interface{}) {
	for n, v := range i {
		x := reflect.ValueOf(v)
		if x.Kind() == tf.Required[n+len(tf.BaseValues)-1] {
			tf.Values = append(tf.Values, x)
		}
	}
	return
}

func (tf *ThemeFormat) AddValues(i ...interface{}) {
	tf.parseFn(i...)
}
func (tf *ThemeFormat) Formatt(i ...interface{}) (s string) {
	fmt.Println("FUCKeR")
	// s = "FUCKeR"
	tf.parseFn(i...)
	if tf.Valid() {
		if tf.PreFn != nil {
			tf.PreFn(tf, i...)
		}
		s = tf.formatFn()
		tf.Values = make([]reflect.Value, 0)
	}
	return
}

const (
	badgeStr    = "[badgeIcon] %s  [-:-:-][badgeText] %s [-:-:-]"
	badgeStrTpl = "[badgeIcon] {{.icon}} [-:-:-][{{.color | contrast}}:{{.color}}]{{ .text | hexless }}[-:-:-]"
	priColor    = "[{{.color | contrast}}:{{.color}}:b] {{ .text | hexless }} [-:-:-]"
	twoColor    = "[{{.fg}}:{{.bg}}:b]{{.text}}[-:-:-]"
)

var (
	ColorSet = &ThemeFormatt{
		formatStr: twoColor,
		Required: []reflect.Kind{
			reflect.String,
			reflect.String,
			reflect.String,
		},
		Keys: []string{"text", "fg", "bg"},
		// // parseFn: func(tf *ThemeFormatt, i ...interface{}) {
		// // },
		// formatFn: func(tf *ThemeFormatt, i ...interface{}) string {
		// 	return fmt.Sprintf(tf.formatStr, i...)
		// },
		// Values: []reflect.Value{},
	}
	BadgeFormat = &ThemeFormatt{
		formatStr: priColor,
		Required: []reflect.Kind{
			reflect.String,
			reflect.String,
			reflect.String,
		},
		Keys: []string{"icon", "color", "text"},
		// // parseFn: func(tf *ThemeFormatt, i ...interface{}) {
		// // },
		// formatFn: func(tf *ThemeFormatt, i ...interface{}) string {
		// 	return fmt.Sprintf(tf.formatStr, i...)
		// },
		// Values: []reflect.Value{},
	}
	TwoColorBar = &ThemeFormat{
		ThemeFormatt: ColorSet,
		BaseValues:   []reflect.Value{reflect.ValueOf("▀▀▀▀")},
	}
	// TwoColorBar.P
	CSSColorBadge = &ThemeFormat{
		ThemeFormatt: BadgeFormat,
		BaseValues:   []reflect.Value{reflect.ValueOf("#")},
	}
)

func (tf *ThemeFormat) Valid() (valid bool) {
	valid = true
	for i, v := range append(tf.BaseValues, tf.Values...) {
		if i >= len(tf.Required)-1 {
			continue
		}
		if tf.Required[i] != v.Kind() {
			valid = false
		}
	}
	return
}

var FormatStrings map[string]string

type ThemeFormatterFunc func(format string, i ...interface{}) string

type TagStyle struct {
	fg, bg, attr string
}

var baseXtermAnsiColorNames = []string{
	"black",
	"maroon",
	"green",
	"olive",
	"navy",
	"purple",
	"teal",
	"silver",
	"gray",
	"red",
	"lime",
	"yellow",
	"blue",
	"fuchsia",
	"aqua",
	"white",
}

//	Theme{
//		// PrimitiveBackgroundColor:    tcell.GetColor("#101010").TrueColor(),
//	  PrimitiveBackgroundColor:    tcell.ColorBlack,
//		ContrastBackgroundColor:     tcell.ColorBlue,
//		MoreContrastBackgroundColor: tcell.ColorGreen,
//		BorderColor:                 tcell.ColorWhite,
//		BorderFocusColor:            tcell.ColorBlue,
//		TitleColor:                  tcell.ColorWhite,
//		GraphicsColor:               tcell.ColorWhite,
//		PrimaryTextColor:            tcell.ColorWhite,
//		SecondaryTextColor:          tcell.ColorYellow,
//		TertiaryTextColor:           tcell.ColorGreen,
//		InverseTextColor:            tcell.ColorBlue,
//		ContrastSecondaryTextColor:  tcell.ColorDarkCyan,
//	}
var tvtheme *tview.Theme = &tview.Theme{
	PrimitiveBackgroundColor:    tcell.GetColor("#21252B"),
	ContrastBackgroundColor:     tcell.ColorBlue,
	MoreContrastBackgroundColor: tcell.ColorGreen,
	BorderColor:                 tcell.ColorWhite,
	BorderFocusColor:            tcell.ColorBlue,
	TitleColor:                  tcell.ColorWhite,
	// TitleColor:                  tcell.GetColor("#5c6370"),
	GraphicsColor:              tcell.ColorWhite,
	PrimaryTextColor:           tcell.ColorWhite,
	SecondaryTextColor:         tcell.ColorYellow,
	TertiaryTextColor:          tcell.ColorGreen,
	InverseTextColor:           tcell.ColorBlue,
	ContrastSecondaryTextColor: tcell.ColorDarkCyan,
	// ContrastBackgroundColor:     0,
	// MoreContrastBackgroundColor: 0,
	// BorderColor:                 0,
	// BorderFocusColor:            0,
	// GraphicsColor:               0,
	// PrimaryTextColor:            0,
	// SecondaryTextColor:          0,
	// TertiaryTextColor:           0,
	// InverseTextColor:            0,
	// ContrastSecondaryTextColor:  0,
}
var theme *Theme

// func NewHexColor() tcell.Color {
//
// }
func GetTagStyle(fg string, ansi ...bool) (TagStyle, bool) {
	if len(ansi) > 0 && ansi[0] {
		if sty, ok := theme.AnsiOverride[fg]; ok {
			return sty, true
		}
	}
	if sty, ok := theme.TagStyles[fg]; ok {
		return sty, true
	}
	return TagStyle{}, false
}
func GetTagStyler(ansi bool) tview.Styler {
	return func(fg, bg, attr string) (newFgColor string, newBgColor string, newAttributes string) {
		newFgColor = fg
		newBgColor = bg
		newAttributes = attr
		if sty, ok := GetTagStyle(fg, ansi); ok {
			if sty.fg != "" {
				newFgColor = sty.fg
			}
			if sty.bg != "" {
				newBgColor = sty.bg
			}
			if sty.attr != "" {
				newAttributes = sty.attr
			}
		}
		if sty, ok := GetTagStyle(bg, ansi); ok {
			// if sty.fg != "" {
			// 	newFgColor = sty.fg
			// }
			if sty.fg != "" {
				newBgColor = sty.fg
			}
			if sty.attr != "" {
				newAttributes = sty.attr
			}
		}
		return
	}
}

var TagStyler tview.Styler = GetTagStyler(false)

func SetStyler() {
	tview.UpdateCurrentStyler(TagStyler)
}
func defineStyles() {
	if theme != nil {
		return
	}
	SetStyler()
	// var tff ThemeFormatter = BadgeFormat
	tview.Styles = *tvtheme
	theme = &Theme{
		HeaderBackground:  tcell.GetColor("#1C1C1C"),
		GrayerBackground:  tcell.GetColor("#282c34"),
		SidebarBackground: tcell.GetColor("#21252B"),
		SidebarLines:      tcell.GetColor("#5c6370"),
		ContentBackground: tcell.GetColor("#303030"),
		Border:            tcell.GetColor("#1C1C1C"),
		Primary:           tcell.GetColor("#4ed6aa"),
		Secondary:         tcell.GetColor("#b5d1f6"),
		TopbarBorder:      tcell.GetColor("#5c6370"),
		InfoLabel:         tcell.GetColor("#5c6370"),
		Styles:            make(map[string]tcell.Style),
		TagStyles:         make(map[string]TagStyle),
		Formats:           make(map[string]ThemeFormatter),
		Ansi:              make(map[string]TagStyle),
		AnsiOverride:      make(map[string]TagStyle),
	}
	// fmt.Println(CSSColorBadge.Formatt("#4ed6aa", "SHIT"))

	// theme.Formats["badge"] = func(format string, i ...interface{}) string {
	// 	return color.Sprintf(badgeStr, i...)
	// }

	theme.SetStyleFgBgAttr(
		"palette_name",
		tcell.ColorWhite,
		tcell.ColorRed,
		// tcell.GetColor("#890a37"),
		// tcell.ColorGreen,
		tcell.AttrBold,
	)
	// theme.SetStyleFgBg("action", tcell.ColorBlack, tcell.ColorYellow)
	theme.SetStyleFgBg("action", tcell.ColorRed, tcell.ColorYellow)
	theme.NewTagStyle("paletteTagsIcon", "yellow", "#5c6370")
	theme.NewTagStyle("paletteTagsInfo", "black", "yellow")
	// theme.NewTagStyle("sectionSelectSelected", selCol)
	theme.NewTagStyle("badgeIcon", "yellow", "#303030")
	theme.NewTagStyle("foreground", "white")
	theme.NewTagStyle("cursor", "orange")
	theme.NewTagStyle("background", "white", "#303030", "r")
	theme.NewTagStyle("badgeText", "blue", "black")

	theme.NewTagStyle("shortcut", "", "#343434")
	theme.NewTagStyle("shortcutIcon", "teal", "#343434")
	theme.NewTagStyle("shortcutModifier", "#343434", "teal")
	theme.NewTagStyle("shortcutLink", "teal", "red")
	theme.NewTagStyle("shortcutKeys", "", "#343434")
	theme.NewTagStyle("shortcutKey", "red", "#343434")
	theme.NewTagStyle("shortcutAction", "yellow", "#343434")

	theme.NewTagStyle("consoleIcon", "blue", "#303030")
	theme.NewTagStyle("consoleMsg", "blue", "black", "r")
	theme.NewTagStyle("consoleMsgPlugin", "green", "black", "r")
	theme.NewTagStyle("consoleMsgErr", "red", "black", "r")
	theme.NewTagStyle("consoleMsgPluginErr", "red", "black", "r")
	theme.NewTagStyle("consoleMsgWarn", "yellow", "black", "r")
	theme.NewTagStyle("consoleMsgDebug", "pink", "black", "r")
	theme.NewTagStyle("scriptConsoleMsg", "green", "black", "r")
	theme.NewTagStyle("scriptConsoleErr", "red", "black", "r")
	// theme.NewTagStyle("consoleMsgPrefix", "", "", "r")
	// theme.SetStyleFgBg("paletteTagsIcon", tcell.GetColor("red"), tcell.ColorBlack)
	// theme.SetStyleFgBg("paletteTagsInfo", tcell.ColorBlack, tcell.ColorRed)
	theme.SetStyleFg("list_main", tcell.ColorGreen)
	theme.SetStyleFg("list_second", tcell.ColorBlue)
	theme.SetStyleFgBg(
		"input_placeholder",
		tcell.ColorYellow,
		tcell.GetColor("#2c3139"),
	)
	theme.SetStyleFgBg("input_field", tcell.ColorBlue, tcell.GetColor("#373e48"))
	theme.SetStyleFgBg(
		"input_autocomplete",
		tcell.ColorRed,
		tcell.GetColor("#373e48"),
	)
}

func init() {
	defineStyles()
}

func NewTagStyle(
	args ...string,
) (ts TagStyle) {
	ts = TagStyle{
		fg:   "",
		bg:   "",
		attr: "",
	}

	if len(args) > 0 {
		ts.fg = args[0]
	}
	if len(args) > 1 {
		ts.bg = args[1]
	}
	if len(args) > 2 {
		ts.attr = args[2]
	}
	return
}
func (t *Theme) NewTagStyle(
	name string,
	args ...string,
) {
	ts := NewTagStyle(args...)
	t.TagStyles[name] = ts
}

func (t *Theme) SetStyleFgBgAttr(
	name string,
	fg, bg tcell.Color,
	attr tcell.AttrMask,
) *tcell.Style {
	sty := t.SetStyle(name)
	t.Styles[name] = sty.Foreground(fg).Background(bg).Attributes(attr)
	return sty
}

func (t *Theme) SetStyleFg(name string, fg tcell.Color) *tcell.Style {
	sty := t.SetStyle(name)
	t.Styles[name] = sty.Foreground(fg)
	return sty
}

func (t *Theme) SetStyleFgBg(name string, fg, bg tcell.Color) *tcell.Style {
	sty := t.SetStyle(name)
	t.Styles[name] = sty.Foreground(fg).Background(bg)
	return sty
}

func (t *Theme) SetStyle(name string) *tcell.Style {
	sty := &tcell.Style{}
	t.Styles[name] = *sty
	return sty
}

func (t *Theme) Get(name string) *tcell.Style {

	if sty, ok := t.Styles[name]; ok {
		return &sty
	}
	if sty, ok := t.TagStyles[name]; ok {
		style := tcell.StyleDefault
		if sty.fg != "" {
			style = style.Foreground(tcell.GetColor(sty.fg))
		}
		if sty.bg != "" {
			style = style.Background(tcell.GetColor(sty.bg))
		}
		if sty.attr != "" {
			// style = style.Normal()
			for _, flag := range sty.attr {
				switch flag {
				case 'l':
					style = style.Blink(true)
				case 'b':
					style = style.Bold(true)
				case 'i':
					style = style.Italic(true)
				case 'd':
					style = style.Dim(true)
				case 'r':
					style = style.Reverse(true)
				case 'u':
					style = style.Underline(true)
				case 's':
					style = style.StrikeThrough(true)
				}
			}

		}
	}
	return &tcell.Style{}
}

func Jright(s string, n int) string {
	if n < 0 {
		n = 0
	}
	return strings.Repeat(" ", n) + s
}

func Jleft(s string, n int) string {
	if n < 0 {
		n = 0
	}
	return s + strings.Repeat(" ", n)
}

func Jcenter(s string, n int) string {
	if n < 0 {
		n = 0
	}
	// div := ((2 * (n-len(s))) / 2) + 1
	rem := n - len(s)
	rem = ((rem * 2) / 2) / 2
	rem = rem
	return strings.Repeat(" ", rem) + s + strings.Repeat(" ", rem)
}

func (t *Theme) GetTheme() *Theme {
	return t
}

func (t *Theme) FixedSize(w int) string {
	return strings.Repeat(" ", w)
}

func GetTheme() *Theme {
	SetStyler()
	// tags := color.GetColorTags()
	// tags["infolabel"] = RgbHex256toCode("5c6370", false)
	// tags["sckey"] = RgbHex256toCode("fda47f", false)
	// tags["scicon"] = RgbHex256toCode("7aa4a1", false)
	// tags["scname"] = RgbHex256toCode("7aa4a1", false)
	// tags["scdesc"] = RgbHex256toCode("5a93aa", false)
	// tags["colorinfolabel"] = RgbHex256toCode("7aa4a1", false)
	// tags["colorinfovalue"] = RgbHex256toCode("fda47f", false)
	//"#cb7985"
	//"#ff8349"
	//"#2f3239", "#e85c51", "#7aa4a1", "#fda47f", "#5a93aa", "#ad5c7c", "#a1cdd8", "#ebebeb"
	//"#4e5157", "#eb746b", "#8eb2af", "#fdb292", "#73a3b7", "#b97490", "#afd4de", "#eeeeee"

	return theme
}

const (
	TplFgRGB = "38;2;%d;%d;%d"
	TplBgRGB = "48;2;%d;%d;%d"
	FgRGBPfx = "38;2;"
	BgRGBPfx = "48;2;"
)

const (
	TplFg256 = "38;5;%d"
	TplBg256 = "48;5;%d"
	Fg256Pfx = "38;5;"
	Bg256Pfx = "48;5;"
)

var (
	rxNumStr  = regexp.MustCompile("^[0-9]{1,3}$")
	rxHexCode = regexp.MustCompile("^#?([0-9a-fA-F]{3}|[0-9a-fA-F]{6})$")
)

func RgbHex256toCode(val string, isBg bool) (code string) {
	if len(val) == 6 && rxHexCode.MatchString(val) { // hex: "fc1cac"
		code = color.HEX(val, isBg).String()
	} else if strings.ContainsRune(val, ',') { // rgb: "231,178,161"
		code = strings.Replace(val, ",", ";", -1)
		if isBg {
			code = BgRGBPfx + code
		} else {
			code = FgRGBPfx + code
		}
	} else if len(val) < 4 && rxNumStr.MatchString(val) { // 256 code
		if isBg {
			code = Bg256Pfx + val
		} else {
			code = Fg256Pfx + val
		}
	}
	return
}

// _ = sty
// dfg, dbg, dattr := sty.Decompose()
// if dfg != 0 {
//   newFgColor = fmt.Sprintf("#%06X", dfg.Hex())
// }
// if dbg != 0 {
//   newBgColor = fmt.Sprintf("#%06X", dbg.Hex())
// }
// attrs := make([]string, 0)
// attrs = append(attrs, lo.Ternary(dattr&tcell.AttrBold > 0, "b", ""))
// attrs = append(attrs, lo.Ternary(dattr&tcell.AttrItalic > 0, "i", ""))
// attrs = append(attrs, lo.Ternary(dattr&tcell.AttrBlink > 0, "l", ""))
// attrs = append(attrs, lo.Ternary(dattr&tcell.AttrReverse > 0, "r", ""))
// attrs = append(attrs, lo.Ternary(dattr&tcell.AttrDim > 0, "d", ""))
// attrs = append(attrs, lo.Ternary(dattr&tcell.AttrUnderline > 0, "u", ""))
// attrs = append(attrs, lo.Ternary(dattr&tcell.AttrStrikeThrough > 0, "s", ""))
// newAttributes = strings.Join(attrs, "")
// fmt.Println(newFgColor, newBgColor, newAttributes)
